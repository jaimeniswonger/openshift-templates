apiVersion: v1
kind: Template
labels:
  template: itweb-jenkins-persistent-template
message: A Jenkins service has been created in your project.  Log into Jenkins with
  your OpenShift account.  The tutorial at https://github.com/openshift/origin/blob/master/examples/jenkins/README.md
  contains more information about using this template.
metadata:
  annotations:
    description: |-
      Jenkins service, with persistent storage.

      NOTE: You must have persistent volumes available in your cluster to use this template.
    iconClass: icon-jenkins
    openshift.io/display-name: Jenkins
    openshift.io/documentation-url: https://docs.openshift.org/latest/using_images/other_images/jenkins.html
    openshift.io/long-description: This template deploys a Jenkins server capable
      of managing OpenShift Pipeline builds and supporting OpenShift-based oauth login.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    tags: instant-app,jenkins,itweb
  creationTimestamp: null
  name: itweb-jenkins-persistent
objects:
# IMAGE STREAM
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${JENKINS_SERVICE_NAME}
    name: ${JENKINS_SERVICE_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
      - annotations:
          description: The Jenkins image for ITWEB
          tags: ${JENKINS_SERVICE_NAME}
# BUILD CONFIG 
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${JENKINS_SERVICE_NAME}
    labels:
      app: ${JENKINS_SERVICE_NAME}
  spec:
    strategy:
      sourceStrategy:
        from:
          kind: DockerImage
          name: 'openshift/jenkins-2-centos7:v3.9'
      type: Source
    source:          
      git:
        uri: ${JENKINS_GIT_REPOSITORY}
        ref: ${JENKINS_GIT_REPOSITORY_BRANCH}
      type: Git
      sourceSecret:
        name: ${JENKINS_GIT_SECRET}
    output:
      to:
        kind: ImageStreamTag
        name: ${JENKINS_SERVICE_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    triggers:
      - generic:
          secret: ${JENKINS_SERVICE_NAME}
        type: Generic
# ROUTE        
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
    name: ${JENKINS_SERVICE_NAME}
    labels:
      app: ${JENKINS_SERVICE_NAME}
  spec:
    host: ${JENKINS_ROUTE}  
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: ${JENKINS_SERVICE_NAME}
## PERSISTENT VOLUME CLAIM      
#- apiVersion: v1
#  kind: PersistentVolumeClaim
#  metadata:
#    name: ${JENKINS_SERVICE_NAME}
#    labels:
#      app: ${JENKINS_SERVICE_NAME}
#  spec:
#    accessModes:
#    - ReadWriteOnce
#    resources:
#      requests:
#        storage: ${VOLUME_CAPACITY}
# DEPLOYMENT CONFIG        
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${JENKINS_SERVICE_NAME}
    labels:
      app: ${JENKINS_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${JENKINS_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${JENKINS_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: OPENSHIFT_ENABLE_OAUTH
            value: ${ENABLE_OAUTH}
          - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
            value: "true"
          - name: KUBERNETES_MASTER
            value: https://kubernetes.default:443
          - name: KUBERNETES_TRUST_CERTIFICATES
            value: "true"
          - name: JENKINS_SERVICE_NAME
            value: ${JENKINS_SERVICE_NAME}
          - name: JNLP_SERVICE_NAME
            value: ${JNLP_SERVICE_NAME}
          image: ${NAMESPACE}/${JENKINS_SERVICE_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 30
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 420
            timeoutSeconds: 3
          name: jenkins
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
#          volumeMounts:
#          - mountPath: /var/lib/jenkins
#            name: ${JENKINS_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        serviceAccountName: ${JENKINS_SERVICE_NAME}
#        volumes:
#        - name: ${JENKINS_SERVICE_NAME}-data
#          persistentVolumeClaim:
#            claimName: ${JENKINS_SERVICE_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - jenkins
        from:
          kind: ImageStreamTag
          name: ${JENKINS_SERVICE_NAME}:latest
          namespace: ${NAMESPACE}
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
# SERVICE ACCOUNT    
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${JENKINS_SERVICE_NAME}"}}'
    name: ${JENKINS_SERVICE_NAME}
    labels:
      app: ${JENKINS_SERVICE_NAME}
# ROLE BINDING      
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: ${JENKINS_SERVICE_NAME}_edit
    labels:
      app: ${JENKINS_SERVICE_NAME}
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: ${JENKINS_SERVICE_NAME}
# SERVICE JNLP    
- apiVersion: v1
  kind: Service
  metadata:
    name: ${JNLP_SERVICE_NAME}
    labels:
      app: ${JENKINS_SERVICE_NAME}
  spec:
    ports:
    - name: agent
      nodePort: 0
      port: 50000
      protocol: TCP
      targetPort: 50000
    selector:
      name: ${JENKINS_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
# SERVICE    
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "${JNLP_SERVICE_NAME}",
        "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    name: ${JENKINS_SERVICE_NAME}
    labels:
      app: ${JENKINS_SERVICE_NAME}
  spec:
    ports:
    - name: web
      nodePort: 0
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      name: ${JENKINS_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
parameters:
- description: The name of the OpenShift Service exposed for the Jenkins container.
  displayName: Jenkins Service Name
  name: JENKINS_SERVICE_NAME
  value: jenkins
- description: The name of the service used for master/slave communication.
  displayName: Jenkins JNLP Service Name
  name: JNLP_SERVICE_NAME
  value: jenkins-jnlp
- description: Whether to enable OAuth OpenShift integration. If false, the static
    account 'admin' will be initialized with the password 'password'.
  displayName: Enable OAuth in Jenkins
  name: ENABLE_OAUTH
  value: "true"
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  value: 2Gi
- description: Maximum amount of CPU the container can use.
  displayName: CPU Limit
  name: CPU_LIMIT
  value: 1500m  
#- description: Volume space available for data, e.g. 512Mi, 2Gi.
#  displayName: Volume Capacity
#  name: VOLUME_CAPACITY
#  required: true
#  value: 1Gi
- description: The OpenShift Namespace where the Jenkins ImageStream resides.
  displayName: Jenkins ImageStream Namespace
  name: NAMESPACE
  value: ci-cd
- description: The url to the git repository used to build the image
  displayName: Git Repository
  name: JENKINS_GIT_REPOSITORY
  value: ssh://APKAIYMS5Y3AMAIY4L2A@git-codecommit.us-east-2.amazonaws.com/v1/repos/itweb-jenkins
- description: The git repository branch used to build the image
  displayName: Git Repository Branch
  name: JENKINS_GIT_REPOSITORY_BRANCH
  value: develop
- description: The secret used to access the Git repository
  displayName: Git Secret
  name: JENKINS_GIT_SECRET
  value: git-private-key
- description: The URL to access Jenkins
  displayName: Route URL
  name: JENKINS_ROUTE
  value: jenkins.awsos2.americancentury.com