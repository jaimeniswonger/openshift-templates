apiVersion: v1
kind: Template
metadata:
  name: {{ app_name }}-pipeline
  annotations:
    description: A template for creating the {{ app_name }} pipeline for ITWEB
    iconClass: icon-jenkins
    tags: pipeline, jenkins, git, itweb
objects:

# BUILD CONFIG
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: {{ app_name }}-pipeline
    labels:
      app: {{ app_name }}
  spec:
    runPolicy: Serial
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: >
          pipeline {
            agent { node { label 'maven' } }
            stages {
              stage('Fetch Source') {
                steps {
                  git credentialsId: 'itweb-git-credentials', branch: '{{ git_ref }}', url: '{{ git_url }}'
                }
              }

              stage('Maven Test & Deploy') {
                steps {
                  configFileProvider([configFile(fileId: 'itweb-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                    sh("mvn -s $MAVEN_SETTINGS -DskipTests clean deploy")
                  }
                }
              }
              
              stage('Build Image') {
                steps {
                  script {
                    def pom = readMavenPom file: 'pom.xml'
                    def groupId = pom.getGroupId() != null ? pom.getGroupId() : pom.getParent().getGroupId()
                    def artifactId = pom.getArtifactId()
                    def version = pom.getVersion() != null ? pom.getVersion() : pom.getParent().getVersion()
                    
                    openshiftBuild(namespace: '{{ openshift_project_name }}', bldCfg: '{{ app_name }}-builder', showBuildLogs: 'true', env: [[name:'MVN_GROUPID', value:"${groupId}"], [name:'MVN_ARTIFACTID', value:"${artifactId}"], [name:'MVN_VERSION', value:"${version}"]])
                    openshiftBuild(namespace: '{{ openshift_project_name }}', bldCfg: '{{ app_name }}', showBuildLogs: 'true', env: [[name:'MVN_GROUPID', value:"${groupId}"], [name:'MVN_ARTIFACTID', value:"${artifactId}"], [name:'MVN_VERSION', value:"${version}"]])
                  }
                }
              }
              
              stage('Deploy') {
                steps {
                  openshiftDeploy(namespace: '{{ openshift_project_name }}', depCfg: '{{ app_name }}')
                }
              }
            }
          }
      type: JenkinsPipeline
    triggers:
      - generic:
          secret: {{ app_name }}
        type: Generic