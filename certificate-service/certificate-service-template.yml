apiVersion: v1
kind: Template
metadata:
  name: certificate-service
  labels:
    env: infra
  annotations:
    description: A Template for the certificate service
    iconClass: icon-spring
    tags: spring-boot, spring-cloud, itweb, development
    openshift.io/display-name: ITWEB - Certificate Service
objects:
# IMAGE STREAM
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
    creationTimestamp: null
  spec: {}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APP_NAME}-builder
    labels:
      app: ${APP_NAME}
    creationTimestamp: null
  spec: {}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: openjdk
  spec:
    tags:
    - from:
        kind: DockerImage
        name: openjdk:8-jre-alpine
      name: 8-jre-alpine
      referencePolicy:
        type: Source
# BUILD CONFIG - builder
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${APP_NAME}-builder
    labels:
      app: ${APP_NAME}
  spec:
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: springboot-s2i:latest
          namespace: itweb-infra
        env:
          - name: NEXUS_HOST
            value: ${NEXUS_HOST}
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}-builder:latest
    triggers:
    - type: ConfigChange
    - type: ImageChange 
      imageChange: {}
# BUILD CONFIG - runtime      
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    source:
      type: Dockerfile
      dockerfile: |
        FROM itweb-springboot-runtime
        COPY application.jar /
        CMD ["sh", "/usr/local/bin/start-application.sh"]
      images:
      - from:
          kind: ImageStreamTag
          name: ${APP_NAME}-builder:latest
        paths:
        - destinationDir: .
          sourcePath: /opt/app-root/src/application.jar
    strategy:
      type: Docker
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: 'itweb-springboot-runtime:latest'
          namespace: itweb-infra
# DEPLOYMENT CONFIG
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          containerNames:
            - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: '${APP_NAME}:latest'
    replicas: 1
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
          - env:
              - name: spring_cloud_config_uri
                valueFrom:
                  configMapKeyRef:
                    key: spring_cloud_config_uri
                    name: bootstrap-config
              - name: spring_cloud_config_failFast
                valueFrom:
                  configMapKeyRef:
                    key: spring_cloud_config_failFast
                    name: bootstrap-config
              - name: spring_cloud_config_retry_initialInterval
                valueFrom:
                  configMapKeyRef:
                    key: spring_cloud_config_retry_initialInterval
                    name: bootstrap-config
              - name: spring_cloud_config_retry_maxInterval
                valueFrom:
                  configMapKeyRef:
                    key: spring_cloud_config_retry_maxInterval
                    name: bootstrap-config
              - name: spring_cloud_config_retry_maxAttempts
                valueFrom:
                  configMapKeyRef:
                    key: spring_cloud_config_retry_maxAttempts
                    name: bootstrap-config
              - name: spring_cloud_config_retry_multiplier
                valueFrom:
                  configMapKeyRef:
                    key: spring_cloud_config_retry_multiplier
                    name: bootstrap-config          
            name: ${APP_NAME}
            image: ${APP_NAME}
            ports:
              - containerPort: 8080
                protocol: TCP
              - containerPort: 8081
                protocol: TCP
            resources: 
              requests: 
                cpu: ${MIN_CPU}
                memory: ${MIN_MEM}
              limits:
                cpu: ${MAX_CPU}
                memory: ${MAX_MEM}
            readinessProbe:
              httpGet:
                path: /health
                port: 8081
                scheme: HTTP
              initialDelaySeconds: 45
              timeoutSeconds: 2
              periodSeconds: 15
              successThreshold: 1
              failureThreshold: 5
            livenessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-c'
                  - >-
                    STATUS=$(curl --insecure --silent http://$HOSTNAME:8081/health
                    | jq -r '.["status"]')
                    
                    if [ "$STATUS" == "UP" ]

                    then
                            exit 0;
                    else
                            exit 1;
                    fi                    
              initialDelaySeconds: 240
              timeoutSeconds: 2
              periodSeconds: 30
              successThreshold: 1
              failureThreshold: 2
            terminationMessagePath: /dev/termination-log
            imagePullPolicy: Always
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
# SERVICE CONFIG
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    ports:
      - name: 8080-tcp
        protocol: TCP
        port: 8080
        targetPort: 8080
      - name: 8081-tcp
        protocol: TCP
        port: 8081
        targetPort: 8081
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
# ROUTE CONFIG
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    host: ${ROUTE_HOST}
    to:
      kind: Service
      name: ${APP_NAME}
    port:
      targetPort: 8080-tcp
    wildcardPolicy: None    
# PARAMETERS    
parameters:
- description: The name of the new application
  displayName: Application Name
  name: APP_NAME
  value: certificate-service
  required: true
- description: The URL of the Git repository
  displayName: Git URL
  name: GIT_URL
  value: ssh://git-codecommit.us-east-2.amazonaws.com/v1/repos/itweb-mock-certificate-api
  required: true
- description: The Git branch/tag reference
  displayName: Git branch/tag reference
  name: GIT_REF
  value: develop
  required: true
- description: Generic build Trigger Secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GENERIC_TRIGGER_SECRET
- description: The hostname for the route
  displayName: Route Host
  name: ROUTE_HOST
  required: false
- description: Java options
  displayName: Java options
  name: JAVA_OPTS
  value:
  required: false    
- description: Minimum CPU
  displayName: Minimum CPU
  name: MIN_CPU
  value: 300m
  required: true
- description: Minimum Memory
  displayName: Minimum Memory
  name: MIN_MEM
  value: 1Gi
  required: true
- description: Maximum CPU
  displayName: Maximum CPU
  name: MAX_CPU
  value: 900m
  required: true
- description: Maximum Memory
  displayName: Maximum Memory
  name: MAX_MEM
  value: 2Gi
  required: true
- description: Nexus Host
  displayName: Nexus Host
  name: NEXUS_HOST
  value: http://itweb-nexus3.itweb-ci-cd.svc:8081
  required: true