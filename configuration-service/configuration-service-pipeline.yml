apiVersion: v1
kind: Template
metadata:
  name: configuration-service-pipeline
  annotations:
    description: A template for creating the configuration service pipeline for ITWEB
    iconClass: icon-jenkins
    tags: pipeline, jenkins, git, itweb
objects:
# BUILD CONFIG
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: configuration-service-pipeline
    labels:
      app: ${APP_NAME}
      env: infra
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${APP_NAME}", "namespace": "${NAMESPACE}", "kind": "DeploymentConfig"}]'
  spec:
    runPolicy: Serial
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: >
          pipeline {
            agent { node { label 'maven' } }
            stages {
              stage('Fetch Source') {
                steps {
                  git credentialsId: 'itweb-git-credentials', branch: '${GIT_REF}', url: '${GIT_URL}'
                }
              }
    
              stage('Maven Test & Deploy') {
                steps {
                  configFileProvider([configFile(fileId: 'itweb-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                    sh("mvn -s $MAVEN_SETTINGS clean deploy")
                  }
                }
              }
    
              stage('Build Image') {
                steps {
                  script {
                    def pom = readMavenPom file: 'pom.xml'
                    def groupId = pom.getGroupId() != null ? pom.getGroupId() : pom.getParent().getGroupId()
                    def artifactId = pom.getArtifactId()
                    def version = pom.getVersion() != null ? pom.getVersion() : pom.getParent().getVersion()
                    openshiftBuild(namespace: '${NAMESPACE}', bldCfg: '${APP_NAME}-builder', showBuildLogs: 'true', env: [[name:'MVN_GROUPID', value:"${groupId}"], [name:'MVN_ARTIFACTID', value:"${artifactId}"], [name:'MVN_VERSION', value:"${version}"]])
                    openshiftBuild(namespace: '${NAMESPACE}', bldCfg: '${APP_NAME}', showBuildLogs: 'true', env: [[name:'MVN_GROUPID', value:"${groupId}"], [name:'MVN_ARTIFACTID', value:"${artifactId}"], [name:'MVN_VERSION', value:"${version}"]])
                  }
                }
              }  
      
              stage('Deploy') {
                steps {
                  openshiftDeploy(namespace: '${NAMESPACE}', depCfg: '${APP_NAME}')  
                } 
              }
            }
          }
    triggers:
      - generic:
          secret: ${APP_NAME}
        type: Generic
# PARAMETERS    
parameters:
- description: The name of the new application
  displayName: Application Name
  name: APP_NAME
  value: configuration-service
  required: true
- description: The URL of the Git repository
  displayName: Git URL
  name: GIT_URL
  value: ssh://git-codecommit.us-east-2.amazonaws.com/v1/repos/aci-itweb-config-service
  required: true
- description: The Git branch/tag reference
  displayName: Git branch/tag reference
  name: GIT_REF
  value: develop
  required: true
- description: The namespace to deploy in to
  displayName: Namespace
  name: NAMESPACE
  value: itweb-infra
  required: true  
- description: The secret containing Git credentials
  displayName: Git Credentials Secret
  name: GIT_CREDENTIALS
  value: itweb-git-credentials
  required: true